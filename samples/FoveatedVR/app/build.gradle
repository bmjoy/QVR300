apply plugin: 'com.android.application'
project.ext.SVRLocation = System.getenv('SVR_HOME') + '/svrApi/libs'

android {
    compileSdkVersion 25
    buildToolsVersion "27.0.2"
    defaultConfig {
        applicationId "com.qualcomm.svr.foveated"
        minSdkVersion 25
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
		setProperty("archivesBaseName", "foveatedvr")
		manifestPlaceholders = ["orientation" : "landscape"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk.abiFilters 'armeabi-v7a'
        ndk.stl "stlport_static"


    }
	
	repositories {
        flatDir {
            dirs project.ext.SVRLocation
        }
    }
	
    signingConfigs{
		unsigned{
			storeFile file("${System.env.USERPROFILE}/.android/debug.keystore")
			storePassword = "android"
			keyAlias = "androiddebugkey"
			keyPassword = "android"
			v2SigningEnabled = false
		}
	}

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			signingConfig signingConfigs.unsigned
        }
        debug {
            debuggable = true
            jniDebuggable = true
        }
		
    }
	
	flavorDimensions "screenOrientation"
  
		productFlavors 
		{
			ll {
				dimension "screenOrientation"
				manifestPlaceholders =  ["orientation" : "landscape"]
			}

			lr {
				dimension "screenOrientation"
				manifestPlaceholders = ["orientation" : "reverseLandscape"]
			}
		}
    externalNativeBuild {
        ndkBuild {
            path '../jni/Android.mk'
        }
    }


}

dependencies {
    debugImplementation(name: 'svrApi-debug', ext: 'aar')
    releaseImplementation(name: 'svrApi-release', ext: 'aar')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
}

android.buildTypes.all { theBuildType ->
    task ("extractSvrSo${theBuildType.name}") {
	        
		tasks.whenTaskAdded { task ->
            if( task.name.startsWith("externalNativeBuild") && task.name.endsWith(theBuildType.name.substring(1))) {
                task.dependsOn 'extractSvrSo' + theBuildType.name
            }
        }
        doLast {
		
            copy {
                from zipTree(project.ext.SVRLocation + "/svrApi-" + theBuildType.name + ".aar")
                into ".svrLibs/" + theBuildType.name
                include "jni/**/*.so"
            }
        }
    }
}